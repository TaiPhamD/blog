---
title: "UEFI Secure Boot"
author: "Peter Pham"
date: "2022-09-01"
categories: [Secure Boot, UEFI, EDK2, openSSL]
image: "uefi_logo.png"
format:
  html:
    code-fold: true
jupyter: python3
---

Secure Boot has becoming more popular in the past few years in the consumer PC segment due to the new windows 11 [Secure Boot requirement](https://www.windowscentral.com/how-enable-secure-boot-pc-install-windows-11). I wanted to learn more about Secure Boot by implementing part of UEFI security validation process using Python as proof of concept.

Following this [tutorial](https://github.com/perez987/OpenCore-UEFI-Secure-Boot), I have successfully enrolled my own certificate for self-signing the [OpenCore](https://github.com/acidanthera/OpenCorePkg) bootloader to support Secure Boot. 

Let's explore what happens when you sign an UEFI image. I recommend using an Ubuntu VM to have access to [sbsign tool](https://manpages.ubuntu.com/manpages/xenial/man1/sbsign.1.html) for UEFI development so you can follow the below commands: 

```bash
# Download opencore so you can get a clean unsigned UEFI application (You can use any .efi app so it doesn't have to be OpenCore)
curl -L https://github.com/acidanthera/OpenCorePkg/releases/download/0.8.3/OpenCore-0.8.3-RELEASE.zip > opencore.zip
unzip opencore.zip -d opencore

# Generate an Image Signing Key (ISK) using openSSL
openssl req -new -x509 -newkey rsa:2048 -sha256 -days 365 -subj "/CN=Image Signing Key" -keyout ISK.key -out ISK.pem
# Using sbsign to sign the image. This app is part of sbsigntools
sbsign --key ISK.key --cert ISK.pem opencore/X64/EFI/BOOT/BOOTx64.efi --output opencore/X64/EFI/BOOT/BOOTx64_signed.efi
```

We can run the following Python code to see the file size differences:

```{python}
# Print file size of unsigned and signed image

with open("opencore/X64/EFI/BOOT/BOOTx64.efi", mode="rb") as file:  # b is important -> binary
    unsigned_image = file.read()
    print("Unsigned image file size :", len(unsigned_image))

with open("opencore/X64/EFI/BOOT/BOOTx64_signed.efi", mode="rb") as file:  # b is important -> binary
    signed_image = file.read()
    print("Signed image file size :", len(signed_image))
```

As we can see the signed image increased by 1572 Bytes. This is because the signature is added to the original image. Now we will try to extract the signed certificate from the signed image. The UEFI image uses a Microsoft PE file system as described [here](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format). We can extract the certificate using the following steps:

  - Locate the PE header by finding PE header offset from **0x3C** file offset
  - Read Optional Header immediate after the PE header to read the **Magic** code to determine offset for PE vs PE+ to get to the **Certificate Table**
  - Extract each certificate by assuming the first certificate will start at the Certificate Table VirtualAddress. Then the next certificate will be 8-byte aligned from the end of the previous certificate. We will loop until the offset exceeds the Certificate Table Size.
```{python}
# per microsoft PE/COFF spec, the first 4 bytes at 0x3c offset will point to the start of the PE header
pe_header = signed_image[0x3C : 0x3C + 4]
pe_header_offset = int.from_bytes(pe_header, "little") + 4
print("pe header offset :", pe_header_offset)

# Decode PE header
import ctypes
class PE_header(ctypes.Structure):
    _fields_ = (
        ("Machine", ctypes.c_uint16),
        ("NumberOfSections", ctypes.c_uint16),
        ("TimeDateStamp", ctypes.c_uint32),
        ("PointerToSymbolTable", ctypes.c_uint32),
        ("NumberOfSymbols", ctypes.c_uint32),
        ("SizeOfOptionalHeader", ctypes.c_uint16),
        ("Characteristics", ctypes.c_uint16),
    )

raw_pe_header = signed_image[pe_header_offset : pe_header_offset + ctypes.sizeof(PE_header)]
pe_header = PE_header.from_buffer_copy(raw_pe_header)

# Print PE header
print("PE header info: ")
print("\tMachine :", hex(pe_header.Machine))
print("\tNumberOfSections :", pe_header.NumberOfSections)
print("\tTimeDateStamp :", pe_header.TimeDateStamp)
print("\tPointerToSymbolTable :", pe_header.PointerToSymbolTable)
print("\tNumberOfSymbols :", pe_header.NumberOfSymbols)
print("\tSizeOfOptionalHeader :", pe_header.SizeOfOptionalHeader)
print("\tCharacteristics :", hex(pe_header.Characteristics))


# Decode Magic from optional header

raw_optional_header = signed_image[
    pe_header_offset
    + ctypes.sizeof(PE_header) : pe_header_offset
    + ctypes.sizeof(PE_header)
    + pe_header.SizeOfOptionalHeader
]
magic = raw_optional_header[0:2]


if magic == b"\x0b\x01":
    print("Found a PE32 image")
    cert_table_offset = 128
elif magic == b"\x0b\x02":
    print("Found a PE32+ image")
    cert_table_offset = 144
else:
    print("Unknown PE magic")
    exit()
raw_cert_table = raw_optional_header[cert_table_offset : cert_table_offset + 8]

# Decode Optional Header Data Directory to get certificates
class DATA_Directory(ctypes.Structure):
    _fields_ = (
        ("VirtualAddress", ctypes.c_uint32),
        ("Size", ctypes.c_uint32),
    )
# Optional Header Data Directory contains start of Cert address and total size of all certs
cert_table = DATA_Directory.from_buffer_copy(raw_cert_table)
print("\nCertificate Table VirtualAddress:", cert_table.VirtualAddress)
print("Certificate Table Size:", cert_table.Size)

```

We found the Certificate Table starts at offset 20488 with a size of 1568 bytes. Now we can write our loop to read all certificates:

```{python}
# walk to cert table

class Cert_Attribute(ctypes.Structure):
    _fields_ = (
        ("dwLength", ctypes.c_uint32),
        ("wRevision", ctypes.c_uint16),
        ("wCertificateType", ctypes.c_uint16),
    )

offset = 0
certs = []
while offset < cert_table.Size:
    print("Cerificate at relative offset:", offset)
    raw_cert = signed_image[
        cert_table.VirtualAddress
        + offset : cert_table.VirtualAddress
        + offset
        + ctypes.sizeof(Cert_Attribute)
    ]
    cert = Cert_Attribute.from_buffer_copy(raw_cert)
    print("\tcert.dwLength", cert.dwLength)
    print("\tcert.wRevision", cert.wRevision)
    print("\tcert.wCertificateType", cert.wCertificateType)
    print("\tCert attribute len: ", ctypes.sizeof(Cert_Attribute))
    pcks = signed_image[
        cert_table.VirtualAddress
        + offset
        + ctypes.sizeof(Cert_Attribute) : cert_table.VirtualAddress
        + offset
        + ctypes.sizeof(Cert_Attribute)
        + cert.dwLength 
    ]
    certs.append(pcks)
    pad_len = (8 - ((offset + cert.dwLength) % 8)) % 8
    offset += ctypes.sizeof(Cert_Attribute) + cert.dwLength + pad_len
    print("\tNext offset in cert table: ", offset)

print("We found a total of : ", len(certs), "certificate(s)")
```

Once we have the certificate then we can parse the certificate using pyasn1 module. The 2 components that we are interested in are the **content** and **encryptedDigest**. The **content** is the hash of the original image and the **encryptedDigest** is the signature of the hash. We can verify the signature using the public key of the certificate. The public key is stored in the **subjectPublicKeyInfo** field. The **subjectPublicKeyInfo** is a DER encoded ASN.1 structure.

```{python}
# See also https://github.com/etingof/pyasn1-modules/blob/master/tools/pkcs7dump.py
from pyasn1.codec.der import decoder, encoder
from pyasn1_modules import rfc2315 # PKCS#7
from pyasn1_modules import rfc2459 # X.509
from pyasn1_modules import rfc2437 # PKCS#1 (RSA)
from cryptography.hazmat.primitives.asymmetric import rsa, padding, utils
from cryptography.hazmat.primitives import hashes
from cryptography import x509
import hashlib
# Parse just the first cert
c = certs[0]
# Extract the content field
print("Decoding certificate..Only printing contentInfo and signerInfos\n")
content_info, _ = decoder.decode(c, asn1Spec=rfc2315.ContentInfo())
print("contentType: ", content_info.getComponentByName("contentType"))
# Decode the content as signed_data
signed_data, _ = decoder.decode(content_info.getComponentByName("content"), asn1Spec=rfc2315.SignedData())
print(signed_data["contentInfo"])
print(signed_data["signerInfos"])

```

There are several steps in the UEFI image verification process but we will just go over 2 of them:

- Compute the hash of the PE image per MS specification and compare that to the digest of content info.
- Validate the encrypted digest using the public key of the signer info.


Computing the PE image is described in Microsoft's [PE authentication](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwijsKzN5vb5AhVCIDQIHVBFArsQFnoECAoQAQ&url=https%3A%2F%2Fdownload.microsoft.com%2Fdownload%2F9%2Fc%2F5%2F9c5b2167-8017-4bae-9fde-d599bac8184a%2FAuthenticode_PE.docx&usg=AOvVaw0LO92cXLae7IvHHxizc6f9) as follow:


1.	Load the image header into memory.
2.	Initialize a hash algorithm context.
3.	Hash the image header from its base to immediately before the start of the checksum address, as specified in Optional Header Windows-Specific Fields.
4.	Skip over the checksum, which is a 4-byte field.
5.	Hash everything from the end of the checksum field to immediately before the start of the Certificate Table entry, as specified in Optional Header Data Directories.
6.	Get the Attribute Certificate Table address and size from the Certificate Table entry. For details, see section 5.7 of the PE/COFF specification.
7.	Exclude the Certificate Table entry from the calculation and hash everything from the end of the Certificate Table entry to the end of image header, including Section Table (headers).The Certificate Table entry is 8 bytes long, as specified in Optional Header Data Directories. 
8.	Create a counter called SUM_OF_BYTES_HASHED, which is not part of the signature. Set this counter to the SizeOfHeaders field, as specified in Optional Header Windows-Specific Field.
9.	Build a temporary table of pointers to all of the section headers in the image. The NumberOfSections field of COFF File Header indicates how big the table should be. Do not include any section headers in the table whose SizeOfRawData field is zero. 
10.	Using the PointerToRawData field (offset 20) in the referenced SectionHeader structure as a key, arrange the table's elements in ascending order. In other words, sort the section headers in ascending order according to the disk-file offset of the sections.
11.	Walk through the sorted table, load the corresponding section into memory, and hash the entire section. Use the SizeOfRawData field in the SectionHeader structure to determine the amount of data to hash.
12.	Add the section’s SizeOfRawData value to SUM_OF_BYTES_HASHED.
13.	Repeat steps 11 and 12 for all of the sections in the sorted table.
14.	Create a value called FILE_SIZE, which is not part of the signature. Set this value to the image’s file size, acquired from the underlying file system. If FILE_SIZE is greater than SUM_OF_BYTES_HASHED, the file contains extra data that must be added to the hash. This data begins at the SUM_OF_BYTES_HASHED file offset, and its length is:
(File Size) – ((Size of AttributeCertificateTable) + SUM_OF_BYTES_HASHED)
Note: The size of Attribute Certificate Table is specified in the second ULONG value in the Certificate Table entry (32 bit: offset 132, 64 bit: offset 148) in Optional Header Data Directories.
15.	Finalize the hash algorithm context.
Note: This procedure uses offset values from the PE/COFF specification, version 8.1 . For authoritative offset values, refer to the most recent version of the PE/COFF specification.
```{python}
#digest = hashlib.sha256(authAttrRaw).digest()
hash_bytes = signed_image[0: pe_header_offset
    + ctypes.sizeof(PE_header)
    + pe_header.SizeOfOptionalHeader]

```

We have successfully computed the hash that matches the contentInfo:content.

Next we can manually compute the sha256 hash of the rfc2315 authenticatedAttributes:
    
```{python}
# Extract authenticatedAttributes
authenticated_attributes_orig = signed_data["signerInfos"][0]["authenticatedAttributes"]
# Get rid of the implicit tag authenticatedAttributes (it's not supposed to be included in the signature)
authenticated_attributes = rfc2315.Attributes()
authenticated_attributes.extend(authenticated_attributes_orig)
print(authenticated_attributes)
auth_attr_raw = encoder.encode(authenticated_attributes)
digest = hashlib.sha256(auth_attr_raw).digest()
print("SHA256 of authenticated_attributes: ", rfc2315.Digest(digest).prettyPrint())
```